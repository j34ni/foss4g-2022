Traceback (most recent call last):
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from hvplot import xarray
VCI.hvplot(x = 'lat', y = 'lon',
           cmap='RdYlGn', clim=(-200,+200), alpha=0.7,
           geo=True, tiles= 'CartoLight',
           title=f'CGLS VCI {AOI_name} {VCI.isel(time=-1).time.dt.date.data}',
           width=800, height=700,
           )
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [41][0m, in [0;36m<cell line: 2>[0;34m()[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhvplot[39;00m [38;5;28;01mimport[39;00m xarray
[0;32m----> 2[0m [43mVCI[49m[38;5;241;43m.[39;49m[43mhvplot[49m[43m([49m[43mx[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mlat[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43my[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mlon[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m      3[0m [43m           [49m[43mcmap[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mRdYlGn[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mclim[49m[38;5;241;43m=[39;49m[43m([49m[38;5;241;43m-[39;49m[38;5;241;43m200[39;49m[43m,[49m[38;5;241;43m+[39;49m[38;5;241;43m200[39;49m[43m)[49m[43m,[49m[43m [49m[43malpha[49m[38;5;241;43m=[39;49m[38;5;241;43m0.7[39;49m[43m,[49m
[1;32m      4[0m [43m           [49m[43mgeo[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mtiles[49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mCartoLight[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m      5[0m [43m           [49m[43mtitle[49m[38;5;241;43m=[39;49m[38;5;124;43mf[39;49m[38;5;124;43m'[39;49m[38;5;124;43mCGLS VCI [39;49m[38;5;132;43;01m{[39;49;00m[43mAOI_name[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m [39;49m[38;5;132;43;01m{[39;49;00m[43mVCI[49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mtime[49m[38;5;241;43m=[39;49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mtime[49m[38;5;241;43m.[39;49m[43mdt[49m[38;5;241;43m.[39;49m[43mdate[49m[38;5;241;43m.[39;49m[43mdata[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m'[39;49m[43m,[49m
[1;32m      6[0m [43m           [49m[43mwidth[49m[38;5;241;43m=[39;49m[38;5;241;43m800[39;49m[43m,[49m[43m [49m[43mheight[49m[38;5;241;43m=[39;49m[38;5;241;43m700[39;49m[43m,[49m
[1;32m      7[0m [43m           [49m[43m)[49m

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/hvplot/plotting/core.py:82[0m, in [0;36mhvPlotBase.__call__[0;34m(self, x, y, kind, **kwds)[0m
[1;32m     79[0m         plot [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_converter(x, y, kind, [38;5;241m*[39m[38;5;241m*[39mkwds)(kind, x, y)
[1;32m     80[0m         [38;5;28;01mreturn[39;00m pn[38;5;241m.[39mpanel(plot, [38;5;241m*[39m[38;5;241m*[39mpanel_dict)
[0;32m---> 82[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_converter[49m[43m([49m[43mx[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mkind[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m(kind, x, y)

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/hvplot/plotting/core.py:89[0m, in [0;36mhvPlotBase._get_converter[0;34m(self, x, y, kind, **kwds)[0m
[1;32m     87[0m y [38;5;241m=[39m y [38;5;129;01mor[39;00m params[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124my[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[1;32m     88[0m kind [38;5;241m=[39m kind [38;5;129;01mor[39;00m params[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mkind[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[0;32m---> 89[0m [38;5;28;01mreturn[39;00m [43mHoloViewsConverter[49m[43m([49m
[1;32m     90[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_data[49m[43m,[49m[43m [49m[43mx[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43mkind[49m[38;5;241;43m=[39;49m[43mkind[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mparams[49m
[1;32m     91[0m [43m[49m[43m)[49m

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/hvplot/converter.py:434[0m, in [0;36mHoloViewsConverter.__init__[0;34m(self, data, x, y, kind, by, use_index, group_label, value_label, backlog, persist, use_dask, crs, fields, groupby, dynamic, grid, legend, rot, title, xlim, ylim, clim, symmetric, logx, logy, loglog, hover, subplots, label, invert, stacked, colorbar, datashade, rasterize, row, col, debug, framewise, aggregator, projection, global_extent, geo, precompute, flip_xaxis, flip_yaxis, dynspread, hover_cols, x_sampling, y_sampling, project, tools, attr_labels, coastline, tiles, sort_date, check_symmetric_max, transforms, stream, cnorm, features, rescale_discrete_levels, **kwds)[0m
[1;32m    432[0m y0, y1 [38;5;241m=[39m ylim [38;5;129;01mor[39;00m (py0, py1)
[1;32m    433[0m extents [38;5;241m=[39m (x0, y0, x1, y1)
[0;32m--> 434[0m x0, y0, x1, y1 [38;5;241m=[39m [43mproject_extents[49m[43m([49m[43mextents[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcrs[49m[43m,[49m[43m [49m[43mproj_crs[49m[43m)[49m
[1;32m    435[0m [38;5;28;01mif[39;00m xlim:
[1;32m    436[0m     xlim [38;5;241m=[39m (x0, x1)

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/geoviews/util.py:87[0m, in [0;36mproject_extents[0;34m(extents, src_proj, dest_proj, tol)[0m
[1;32m     83[0m domain_in_src_proj [38;5;241m=[39m Polygon([[x1, y1], [x2, y1],
[1;32m     84[0m                               [x2, y2], [x1, y2],
[1;32m     85[0m                               [x1, y1]])
[1;32m     86[0m boundary_poly [38;5;241m=[39m Polygon(src_proj[38;5;241m.[39mboundary)
[0;32m---> 87[0m dest_poly [38;5;241m=[39m [43msrc_proj[49m[38;5;241;43m.[39;49m[43mproject_geometry[49m[43m([49m[43mPolygon[49m[43m([49m[43mdest_proj[49m[38;5;241;43m.[39;49m[43mboundary[49m[43m)[49m[43m,[49m[43m [49m[43mdest_proj[49m[43m)[49m[38;5;241m.[39mbuffer([38;5;241m0[39m)
[1;32m     88[0m [38;5;28;01mif[39;00m src_proj [38;5;241m!=[39m dest_proj:
[1;32m     89[0m     [38;5;66;03m# Erode boundary by threshold to avoid transform issues.[39;00m
[1;32m     90[0m     [38;5;66;03m# This is a workaround for numerical issues at the boundary.[39;00m
[1;32m     91[0m     eroded_boundary [38;5;241m=[39m boundary_poly[38;5;241m.[39mbuffer([38;5;241m-[39msrc_proj[38;5;241m.[39mthreshold)

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/cartopy/crs.py:805[0m, in [0;36mProjection.project_geometry[0;34m(self, geometry, src_crs)[0m
[1;32m    803[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m method_name:
[1;32m    804[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124mf[39m[38;5;124m'[39m[38;5;124mUnsupported geometry type [39m[38;5;132;01m{[39;00mgeom_type[38;5;132;01m!r}[39;00m[38;5;124m'[39m)
[0;32m--> 805[0m [38;5;28;01mreturn[39;00m [38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mmethod_name[49m[43m)[49m[43m([49m[43mgeometry[49m[43m,[49m[43m [49m[43msrc_crs[49m[43m)[49m

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/cartopy/crs.py:948[0m, in [0;36mProjection._project_polygon[0;34m(self, polygon, src_crs)[0m
[1;32m    946[0m multi_lines [38;5;241m=[39m []
[1;32m    947[0m [38;5;28;01mfor[39;00m src_ring [38;5;129;01min[39;00m [polygon[38;5;241m.[39mexterior] [38;5;241m+[39m [38;5;28mlist[39m(polygon[38;5;241m.[39minteriors):
[0;32m--> 948[0m     p_rings, p_mline [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_project_linear_ring[49m[43m([49m[43msrc_ring[49m[43m,[49m[43m [49m[43msrc_crs[49m[43m)[49m
[1;32m    949[0m     [38;5;28;01mif[39;00m p_rings:
[1;32m    950[0m         rings[38;5;241m.[39mextend(p_rings)

File [0;32m/usr/share/miniconda/envs/foss4g/lib/python3.10/site-packages/cartopy/crs.py:824[0m, in [0;36mProjection._project_linear_ring[0;34m(self, linear_ring, src_crs)[0m
[1;32m    819[0m debug [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[1;32m    820[0m [38;5;66;03m# 1) Resolve the initial lines into projected segments[39;00m
[1;32m    821[0m [38;5;66;03m# 1abc[39;00m
[1;32m    822[0m [38;5;66;03m# def23ghi[39;00m
[1;32m    823[0m [38;5;66;03m# jkl41[39;00m
[0;32m--> 824[0m multi_line_string [38;5;241m=[39m [43mcartopy[49m[38;5;241;43m.[39;49m[43mtrace[49m[38;5;241;43m.[39;49m[43mproject_linear[49m[43m([49m[43mlinear_ring[49m[43m,[49m
[1;32m    825[0m [43m                                                 [49m[43msrc_crs[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m
[1;32m    827[0m [38;5;66;03m# Threshold for whether a point is close enough to be the same[39;00m
[1;32m    828[0m [38;5;66;03m# point as another.[39;00m
[1;32m    829[0m threshold [38;5;241m=[39m [38;5;28mmax[39m(np[38;5;241m.[39mabs([38;5;28mself[39m[38;5;241m.[39mx_limits [38;5;241m+[39m [38;5;28mself[39m[38;5;241m.[39my_limits)) [38;5;241m*[39m [38;5;241m1e-5[39m

File [0;32mlib/cartopy/trace.pyx:628[0m, in [0;36mcartopy.trace.project_linear[0;34m()[0m

File [0;32mlib/cartopy/trace.pyx:100[0m, in [0;36mcartopy.trace.geos_from_shapely[0;34m()[0m

[0;31mTypeError[0m: an integer is required
TypeError: an integer is required

